package com.future.dao.idao;

import com.future.dao.po.GeQuoteParty;
import com.future.dao.po.GeQuotePartyKey;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

public interface GeQuotePartyMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GE_QUOTE_PARTY
     *
     * @mbggenerated
     */
    @Delete({
        "delete from GE_QUOTE_PARTY",
        "where QUOTENO = #{quoteno,jdbcType=VARCHAR}",
          "and SERIALNO = #{serialno,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(GeQuotePartyKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GE_QUOTE_PARTY
     *
     * @mbggenerated
     */
    @Insert({
        "insert into GE_QUOTE_PARTY (QUOTENO, SERIALNO, ",
        "PARTYFLAG, PARTYNAME, ",
        "GENDER, BIRTHDAY, ",
        "IDENTIFYTYPE, IDENTIFYNUMBER, ",
        "ZIPCODE, COMPANYPHONE, ",
        "HOMEPHONE, MOBILE, ",
        "EMAIL, ADDRESS, ",
        "OCCUPATION, OCCUPATIONTYPE, ",
        "INSRELATIONAPP, INSFLAG, ",
        "REMARK, FLAG, OCCUPATIONM, ",
        "OCCUPATIONTYPEM, OCCUPATIONS, ",
        "OCCUPATIONTYPES, UNDERWRITEAMOUNT, ",
        "DRIVINGLICENCENO, HOUSEADDRESS, ",
        "HOUSESTRUCTURE, IDEXPDATE, ",
        "IDSTDATE, ENTERPRISENAME)",
        "values (#{quoteno,jdbcType=VARCHAR}, #{serialno,jdbcType=VARCHAR}, ",
        "#{partyflag,jdbcType=VARCHAR}, #{partyname,jdbcType=VARCHAR}, ",
        "#{gender,jdbcType=VARCHAR}, #{birthday,jdbcType=TIMESTAMP}, ",
        "#{identifytype,jdbcType=VARCHAR}, #{identifynumber,jdbcType=VARCHAR}, ",
        "#{zipcode,jdbcType=VARCHAR}, #{companyphone,jdbcType=VARCHAR}, ",
        "#{homephone,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, ",
        "#{email,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, ",
        "#{occupation,jdbcType=VARCHAR}, #{occupationtype,jdbcType=VARCHAR}, ",
        "#{insrelationapp,jdbcType=VARCHAR}, #{insflag,jdbcType=VARCHAR}, ",
        "#{remark,jdbcType=VARCHAR}, #{flag,jdbcType=VARCHAR}, #{occupationm,jdbcType=VARCHAR}, ",
        "#{occupationtypem,jdbcType=VARCHAR}, #{occupations,jdbcType=VARCHAR}, ",
        "#{occupationtypes,jdbcType=VARCHAR}, #{underwriteamount,jdbcType=VARCHAR}, ",
        "#{drivinglicenceno,jdbcType=VARCHAR}, #{houseaddress,jdbcType=VARCHAR}, ",
        "#{housestructure,jdbcType=VARCHAR}, #{idexpdate,jdbcType=TIMESTAMP}, ",
        "#{idstdate,jdbcType=TIMESTAMP}, #{enterprisename,jdbcType=VARCHAR})"
    })
    int insert(GeQuoteParty record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GE_QUOTE_PARTY
     *
     * @mbggenerated
     */
    int insertSelective(GeQuoteParty record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GE_QUOTE_PARTY
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "QUOTENO, SERIALNO, PARTYFLAG, PARTYNAME, GENDER, BIRTHDAY, IDENTIFYTYPE, IDENTIFYNUMBER, ",
        "ZIPCODE, COMPANYPHONE, HOMEPHONE, MOBILE, EMAIL, ADDRESS, OCCUPATION, OCCUPATIONTYPE, ",
        "INSRELATIONAPP, INSFLAG, REMARK, FLAG, OCCUPATIONM, OCCUPATIONTYPEM, OCCUPATIONS, ",
        "OCCUPATIONTYPES, UNDERWRITEAMOUNT, DRIVINGLICENCENO, HOUSEADDRESS, HOUSESTRUCTURE, ",
        "IDEXPDATE, IDSTDATE, ENTERPRISENAME",
        "from GE_QUOTE_PARTY",
        "where QUOTENO = #{quoteno,jdbcType=VARCHAR}",
          "and SERIALNO = #{serialno,jdbcType=VARCHAR}"
    })
    @ResultMap("BaseResultMap")
    GeQuoteParty selectByPrimaryKey(GeQuotePartyKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GE_QUOTE_PARTY
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(GeQuoteParty record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GE_QUOTE_PARTY
     *
     * @mbggenerated
     */
    @Update({
        "update GE_QUOTE_PARTY",
        "set PARTYFLAG = #{partyflag,jdbcType=VARCHAR},",
          "PARTYNAME = #{partyname,jdbcType=VARCHAR},",
          "GENDER = #{gender,jdbcType=VARCHAR},",
          "BIRTHDAY = #{birthday,jdbcType=TIMESTAMP},",
          "IDENTIFYTYPE = #{identifytype,jdbcType=VARCHAR},",
          "IDENTIFYNUMBER = #{identifynumber,jdbcType=VARCHAR},",
          "ZIPCODE = #{zipcode,jdbcType=VARCHAR},",
          "COMPANYPHONE = #{companyphone,jdbcType=VARCHAR},",
          "HOMEPHONE = #{homephone,jdbcType=VARCHAR},",
          "MOBILE = #{mobile,jdbcType=VARCHAR},",
          "EMAIL = #{email,jdbcType=VARCHAR},",
          "ADDRESS = #{address,jdbcType=VARCHAR},",
          "OCCUPATION = #{occupation,jdbcType=VARCHAR},",
          "OCCUPATIONTYPE = #{occupationtype,jdbcType=VARCHAR},",
          "INSRELATIONAPP = #{insrelationapp,jdbcType=VARCHAR},",
          "INSFLAG = #{insflag,jdbcType=VARCHAR},",
          "REMARK = #{remark,jdbcType=VARCHAR},",
          "FLAG = #{flag,jdbcType=VARCHAR},",
          "OCCUPATIONM = #{occupationm,jdbcType=VARCHAR},",
          "OCCUPATIONTYPEM = #{occupationtypem,jdbcType=VARCHAR},",
          "OCCUPATIONS = #{occupations,jdbcType=VARCHAR},",
          "OCCUPATIONTYPES = #{occupationtypes,jdbcType=VARCHAR},",
          "UNDERWRITEAMOUNT = #{underwriteamount,jdbcType=VARCHAR},",
          "DRIVINGLICENCENO = #{drivinglicenceno,jdbcType=VARCHAR},",
          "HOUSEADDRESS = #{houseaddress,jdbcType=VARCHAR},",
          "HOUSESTRUCTURE = #{housestructure,jdbcType=VARCHAR},",
          "IDEXPDATE = #{idexpdate,jdbcType=TIMESTAMP},",
          "IDSTDATE = #{idstdate,jdbcType=TIMESTAMP},",
          "ENTERPRISENAME = #{enterprisename,jdbcType=VARCHAR}",
        "where QUOTENO = #{quoteno,jdbcType=VARCHAR}",
          "and SERIALNO = #{serialno,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(GeQuoteParty record);
}