<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"
       default-lazy-init="true">
<!--
    <import resource="applicationContext-mq.xml"/>
-->

    <!--todo: 激活JSR-250 Common Java注解，为使用PostConstruct/PreDestroy -->
    <context:annotation-config/>
    <mvc:annotation-driven/>

    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="com.future.dao"/>
    <context:component-scan base-package="com.future.service"/>
    <context:component-scan base-package="com.future.entity"/>
    <context:component-scan base-package="com.future.util"/>
    <context:component-scan base-package="com.future.annotationservice"/>
    <context:component-scan base-package="com.future.controller"/>
    <context:component-scan base-package="com.future.aop"/>
    <context:component-scan base-package="com.future.facade"/>
    <context:component-scan base-package="com.future.task"/>

    <!--使用注解创建aop代理-->
    <aop:aspectj-autoproxy/>
    <bean id="WebUser" class="com.future.entity.WebUser" init-method="init" destroy-method="destroy">
        <property name="userName">
            <value>name_from_bean</value>
        </property>
        <property name="passwd">
            <value>passwd_from_bean</value>
        </property>
    </bean>
    <!--todo:配置属性变量文件的存放位置，用于@Value("${xxx}")注解中的占位符-->
    <context:property-placeholder
            location="WEB-INF/classes/springproperties/application.properties,
                        WEB-INF/classes/jdbc/jdbc4mysql.properties,
                            WEB-INF/classes/springproperties/mvc.properties,
                                WEB-INF/classes/mq/rabbitmq-config.properties,
                                    WEB-INF/classes/email/email.properties"/>
    <!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" 
		p:driverClassName="${driver}"
		p:url="${url}"
		p:username="${username}"
		p:password="${password}"
        p:initialSize="${initialSize}"
        p:maxActive="${maxActive}"
          p:maxIdle="${maxIdle}"
          p:minIdle="${minIdle}"
          p:maxWait="${maxWait}"
    />

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/future/dao/sqlmap/*.xml"></property>
        <!--page helper设置-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.future.dao.idao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>


	<!-- 配置Jdbc模板  -->
	<!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource" />-->
		
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
		
	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod"
			expression=" execution(* com.future.service..*(..))
                or execution(* com.future.controller..*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />

            <!--<tx:method name="insert*" rollback-for="Exception" />
            <tx:method name="save*" rollback-for="Exception" />
            <tx:method name="update*" rollback-for="Exception" />
            <tx:method name="delete*" rollback-for="Exception" />
            <tx:method name="*" read-only="true" rollback-for="Exception" />-->
        </tx:attributes>
	</tx:advice>

    <!-- 邮箱配置 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}"></property>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.timeout">25000</prop>
            </props>
        </property>
        <property name="username" value="${mail.username}"></property>
        <property name="password" value="${mail.password}"></property>
    </bean>
</beans>
